{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 HelveticaNeue;
}
{\colortbl;\red255\green255\blue255;\red66\green68\blue72;\red0\green0\blue0;\red30\green30\blue31;
\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c32941\c33725\c35294;\cssrgb\c0\c0\c0;\cssrgb\c15686\c15686\c16078;
\cssrgb\c100000\c100000\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\paperw11900\paperh16840\margl1440\margr1440\vieww16820\viewh10320\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc\partightenfactor0

\f0\b\fs28 \cf0 BOOTCAMP WEEK 3 JUSTIFICATIONS
\f1\b0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \

\f0\b \ul TASK 4-
\f1\b0 \ulnone \
\
Advantages of Strings-\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8226 	}Strings allow accommodation of all types of data types such as integer, double, characters etc.\
{\listtext	\uc0\u8226 	}Strings support operator overloading. We can make use of the \'93+\'94 operator for concatenating two strings. We have the 
\fs36 \cf2 \expnd0\expndtw0\kerning0
 
\fs28 \cf3 flexibility to convert int, char, long or double to convert into String by simply concatenating with an empty string "".\cf0 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
Disadvantages of Strings-\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	\uc0\u8226 	}Strings are not immutable, which means they cannot be changed once they are created by the programmer. If the programmer attempts to change the string's content, it will generate a new String. In other words, Strings do not permit the incorporation of new content into existing Strings, nor do they permit the overriding of a String's functionality. \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
Advantages of integers-\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0\cf0 {\listtext	\uc0\u8226 	}Can store the precise values of numbers\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
Disadvantages of Integers-\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls4\ilvl0\cf0 {\listtext	\uc0\u8226 	}Cannot store decimal, double and floating point values\
{\listtext	\uc0\u8226 	}The range of numbers that can be stored is limited to the amount of bits that are used for the number.  Eg. 
\f2\fs30 \cf4 \expnd0\expndtw0\kerning0
. A 16-bit integer would only allow 65536 different numbers
\f1\fs28 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
I have chosen to use String to represent the buyerId as strings allow different data types types to inputted. So, the buyerId variable can consist of numbers, alphabets or a combination of the two as required.\
\
\pard\pardeftab720\sa240\partightenfactor0
\cf3 \cb5 \expnd0\expndtw0\kerning0
Q) Why you should use \'93givenName\'94 and \'93familyName\'94 rather than \'93firstName\'94 and \'93lastName\'94 ?\
A) It is better to use \'93givenName\'94 and \'93familyName\'94 rather than \'93firstName\'94 and \'93lastName\'94 as a person\'92s First Name and Last Name may not always refer to their Given Name and Family Name(Eg. In some cases, a person\'92s name consists of their last name followed by their first name). So, it is better to use first name and last name to avoid any confusion.\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b \cf0 \cb1 \kerning1\expnd0\expndtw0 \ul \ulc0 TASK 7- \cf3 \cb5 \expnd0\expndtw0\kerning0
\ulc3 Design a buyer list display method \
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b0 \cf3 \cb1 \ulnone To print a list of buyers without any duplicates, we can create a new method which contains an enhanced a nested for loop to iterate through the ArrayList.  The first for loop should iterate through the list starting from index i = 0, whereas the second for loop will iterate through the list starting from index i + 1. Within the nested for loop, we can use an if statement that checks if the object at index i is equal to the object at index i + 1. This can be done by using accessors(getters) to retrieve the particular object of the ArrayList and using the .equals() built-in method to check if the objects of the arrayList are equal.  If the particular object does not have any duplicate, it will be printed. This method can be implemented in the edu.monash.fit2099.vehicles.edu.monash.fit2099.vehicles.Vehicle class as the vehicle class contains the Bids ArrayList instance variable which has a list of all the buyer objects.\
\
The Nested for loop can be written as follows, assuming that Bids is the ArrayList that contains the buyers objects-\
for(int i = 0; i < Bids.size(); i++)\{\
     for(int j = i + 1; j < Bids.size(); j++)\{\
         if( ! (Bids.get(i).equals(Bids.get(j))))\{\
                  System.out.println(Bids.get(i));\
        \}\
   \}\
\}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b \cf3 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b0 \cf3 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b \cf0 \kerning1\expnd0\expndtw0 \ul \ulc0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone \
\
}